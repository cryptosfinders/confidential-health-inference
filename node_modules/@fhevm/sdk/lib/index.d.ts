import { FhevmInstanceConfig } from './config';
import { HandleContractPair } from './relayer/userDecrypt';
import { RelayerEncryptedInput } from './relayer/sendEncryption';
import { DecryptedResults } from './relayer/decryptUtils';
import { PublicParams } from './sdk/encrypt';
import { EIP712 } from './sdk/keypair';
export { generateKeypair, createEIP712, EIP712, EIP712Type, } from './sdk/keypair';
export { RelayerEncryptedInput } from './relayer/sendEncryption';
export { HandleContractPair } from './relayer/userDecrypt';
export { PublicParams } from './sdk/encrypt';
export type FhevmInstance = {
    createEncryptedInput: (contractAddress: string, userAddress: string) => RelayerEncryptedInput;
    generateKeypair: () => {
        publicKey: string;
        privateKey: string;
    };
    createEIP712: (publicKey: string, contractAddresses: string[], startTimestamp: string | number, durationDays: string | number) => EIP712;
    publicDecrypt: (handles: (string | Uint8Array)[]) => Promise<DecryptedResults>;
    userDecrypt: (handles: HandleContractPair[], privateKey: string, publicKey: string, signature: string, contractAddresses: string[], userAddress: string, startTimestamp: string | number, durationDays: string | number) => Promise<DecryptedResults>;
    getPublicKey: () => {
        publicKeyId: string;
        publicKey: Uint8Array;
    } | null;
    getPublicParams: (bits: keyof PublicParams) => {
        publicParams: Uint8Array;
        publicParamsId: string;
    } | null;
};
export declare const createInstance: (config: FhevmInstanceConfig) => Promise<FhevmInstance>;
