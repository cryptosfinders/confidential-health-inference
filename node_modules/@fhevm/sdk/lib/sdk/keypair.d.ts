export type EIP712Type = {
    name: string;
    type: string;
};
export type EIP712 = {
    domain: {
        chainId: number;
        name: string;
        verifyingContract: string;
        version: string;
    };
    message: any;
    primaryType: string;
    types: {
        [key: string]: EIP712Type[];
    };
};
/**
 * Creates an EIP712 structure specifically for user decrypt requests
 *
 * @param gatewayChainId The chain ID of the gateway
 * @param verifyingContract The address of the contract that will verify the signature
 * @param publicKey The user's public key as a hex string or Uint8Array
 * @param contractAddresses Array of contract addresses that can access the decryption
 * @param contractsChainId The chain ID where the contracts are deployed
 * @param startTimestamp The timestamp when the decryption permission becomes valid
 * @param durationDays How many days the decryption permission remains valid
 * @returns EIP712 typed data structure for user decryption
 */
export declare const createEIP712: (gatewayChainId: number, verifyingContract: string, contractsChainId: number) => (publicKey: string | Uint8Array, contractAddresses: string[], startTimestamp: string | number, durationDays: string | number, delegatedAccount?: string) => EIP712;
export declare const generateKeypair: () => {
    publicKey: string;
    privateKey: string;
};
