import { TfheCompactPublicKey, CompactPkeCrs } from 'node-tfhe';
import { ENCRYPTION_TYPES } from './encryptionTypes';
type EncryptionTypes = keyof typeof ENCRYPTION_TYPES;
export type EncryptedInput = {
    addBool: (value: boolean | number | bigint) => EncryptedInput;
    add8: (value: number | bigint) => EncryptedInput;
    add16: (value: number | bigint) => EncryptedInput;
    add32: (value: number | bigint) => EncryptedInput;
    add64: (value: number | bigint) => EncryptedInput;
    add128: (value: number | bigint) => EncryptedInput;
    add256: (value: number | bigint) => EncryptedInput;
    addBytes64: (value: Uint8Array) => EncryptedInput;
    addBytes128: (value: Uint8Array) => EncryptedInput;
    addBytes256: (value: Uint8Array) => EncryptedInput;
    addAddress: (value: string) => EncryptedInput;
    getBits: () => EncryptionTypes[];
    encrypt: () => Uint8Array;
};
export type PublicParams<T = CompactPkeCrs> = {
    [key in EncryptionTypes]?: {
        publicParams: T;
        publicParamsId: string;
    };
};
export type EncryptInputParams = {
    aclContractAddress: string;
    chainId: number;
    tfheCompactPublicKey: TfheCompactPublicKey;
    publicParams: PublicParams;
    contractAddress: string;
    userAddress: string;
};
export declare const createEncryptedInput: ({ aclContractAddress, chainId, tfheCompactPublicKey, publicParams, contractAddress, userAddress, }: EncryptInputParams) => EncryptedInput;
export {};
